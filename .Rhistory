#Read in data - must download first
temp <- tempfile()
download.file(downloadLink,temp)
gbif_datasets <- readr::read_csv(file = unz(temp, filename = "temp.csv"))
basename(temp)
gbif_datasets <- readr::read_csv(file = unz(temp, filename = paste(basename(temp), ".csv")))
gbif_datasets <- readr::read_csv(file = unz(temp, filename = paste0(basename(temp), ".csv")))
?unz
temp
list.files(temp)
#Read in data - must download first
temp <- tempdir()
download.file(downloadLink,paste0(temp, basename(downloadLink)))
temp
downloadLink
paste0(temp, basename(downloadLink)
paste0(temp, basename(downloadLink))
paste0(temp, basename(downloadLink))
download.file(url = downloadLink, destfile = paste0(temp, "/" basename(downloadLink)))
download.file(url = downloadLink, destfile = paste0(temp, "/", basename(downloadLink)))
temp
destfile <- paste0(temp, "/", basename(downloadLink))
basename(destfile)
tools::file_path_sans_ext(destfile)
csv_name <- basename(tools::file_path_sans_ext(destfile))
csv_name
gbif_datasets <- readr::read_csv(file = unz(destfile, filename = paste0(csv_name, ".csv")))
unlink(temp)
gbif_datasets <- readr::read_tsv(file = unz(destfile, filename = paste0(csv_name, ".csv")))
gbif_datasets %>%
group_by(datasetKey) %>%
count(occurrenceID)
gbif_datasets %>%
count(datasetKey)
gbif_datasets %>%
count(datasetKey) %>%
arrange(n)
gbif_datasets %>%
count(datasetKey) %>%
arrange(desc(n))
# Get list of datasets
GBIF_dataset_ids <- gbif_datasets %>%
pull(datasetKey) %>%
unique()
Agbif_datasets <- rgbif::datasets(uuid = GBIF_dataset_ids)
gbif_datasets <- lapply(GBIF_dataset_ids, function(x) rgbif::datasets(uuid = x)) %>%
data.table::rbindlist()
gbif_datasets <- lapply(GBIF_dataset_ids, function(x) rgbif::datasets(uuid = x) %>% .[["data"]]) %>%
data.table::rbindlist()
gbif_datasets <- lapply(GBIF_dataset_ids, function(x) rgbif::datasets(uuid = x) %>% .[["data"]]) %>%
data.table::rbindlist(fill = TRUE)
gbif_datasets <- lapply(GBIF_dataset_ids[13], function(x) rgbif::datasets(uuid = x) %>% .[["data"]]) %>%
data.table::rbindlist(fill = TRUE)
gbif_datasets <- lapply(GBIF_dataset_ids[1], function(x) rgbif::datasets(uuid = x) %>% .[["data"]]) %>%
data.table::rbindlist(fill = TRUE)
GBIF_dataset_ids[1]
gbif_datasets <- lapply(GBIF_dataset_ids[1], function(x) rgbif::datasets(uuid = x) %>% .[["data"]]) %>%
data.table::rbindlist(fill = TRUE)
gbif_datasets <- lapply(GBIF_dataset_ids[1], function(x) rgbif::datasets(uuid = x) %>% .[["data"]])
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
select(doi,
title,
description,
homepage,
key,
installationKey))
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
tibble::enframe()
gbif_datasets <-
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
tibble::enframe())
gbif_datasets
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
as.data.frame())
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
pull(doi,
title,
description,
homepage,
key,
installationKey))
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
map(., ~ keep(
doi,
title,
description,
homepage,
key,
installationKey))
)
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::map(., ~ purrr::keep(
doi,
title,
description,
homepage,
key,
installationKey))
)
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]]
)
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
as_tibble()
)
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
unlist(recursive = FALSE))
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::pluck(
doi,
title,
description,
homepage,
key,
installationKey))
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::pluck(
'doi',
title,
description,
homepage,
key,
installationKey))
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::pluck(
'doi',
'title',
'description',
'homepage',
'key',
'installationKey'))
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>% names(.)
)
# Get possible column names
dataset_col_names <- rgbif::datasets(uuid = GBIF_dataset_ids[1]) %>%
.[["data"]] %>%
names(.)
# Get possible column names
dataset_col_names <- rgbif::datasets(uuid = GBIF_dataset_ids[1]) %>%
.[["data"]] %>%
names(.) %>%
sort()
# get dataset metadata
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(        'doi',
'title',
'description',
'homepage',
'key',
'installationKey'))
))
# get dataset metadata
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(        'doi',
'title',
'description',
'homepage',
'key',
'installationKey')))
# get dataset metadata
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(        'doi',
'title',
'description',
'homepage',
'key',
'installationKey'))) %>%
tibble::enframe()
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(        'doi',
'title',
'description',
'homepage',
'key',
'installationKey')))
# get dataset metadata
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(        'doi',
'title',
'description',
'homepage',
'key',
'installationKey'))) %>%
as_tibble()
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(        'doi',
'title',
'description',
'homepage',
'key',
'installationKey')))
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(        'doi',
'title',
'description',
'homepage',
'key',
'installationKey'))) %>%
as_tibble()
# get dataset metadata
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(        'doi',
'title',
'description',
'homepage',
'key',
'installationKey'))) %>%
as.data.frame()
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]]
)
# get dataset metadata
gbif_datasets <-
lapply(GBIF_dataset_ids[1], function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(        'doi',
'title',
'description',
'homepage',
'key',
'installationKey'))) %>%
as.data.frame()
dataset_col_names
# get dataset metadata
gbif_datasets <-
lapply(GBIF_dataset_ids, function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(
'key',
'doi',
'title',
'description'
)) %>%
as.data.frame()) %>%
data.table::rbindlist()
# get dataset metadata
gbif_datasets <-
lapply(GBIF_dataset_ids, function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(
'key',
'doi',
'title',
'description'
)) %>%
as.data.frame()) %>%
data.table::rbindlist(fill = TRUE)
OBIS_col_names <- obis_datasets %>%
names(.) %>%
sort()
library(robis)
library(rgbif)
library(mregions2)
library(dplyr)
library(sf)
#Make North Pacific US EEZ (~ OBIS area 274)
US_north_pacific_EEZ_concave_hull <-
mregions2::gaz_geometry(x = gaz_search(x = 8456)) %>% #get US EEZ from marineregions
sf::st_cast("POLYGON") %>% #split multipolygon to list of polygons
slice(2) %>% #grab the west coast polygon
.[["the_geom"]] %>% #grab the geometry
st_concave_hull(ratio = 0.3) %>% #make into a concave hull to simplify shape for searching
st_as_text() #make into Well Known Text (WKT)
obis_datasets <-robis::dataset(
scientificname = c("Macrocystis pyrifera",
"Nereocystis luetkeana"),
geometry = US_north_pacific_EEZ_concave_hull
) %>%
select(id,
url,
title,
abstract)
OBIS_col_names <- obis_datasets %>%
names(.) %>%
sort()
source("C:/Users/sformel/Unsynced_Workspace/california_kelp_GBIF_OBIS/query_and_wrangle_gbif.R")
downloadLink <- occ_download_wait('0021163-231120084113126') %>%
.[["downloadLink"]]
#Read in data - must download first
temp <- tempdir()
destfile <- paste0(temp, "/", basename(downloadLink))
download.file(url = downloadLink, destfile = destfile)
csv_name <- basename(tools::file_path_sans_ext(destfile))
gbif_datasets <- readr::read_tsv(file = unz(destfile, filename = paste0(csv_name, ".csv")))
unlink(temp)
# Get list of datasets
GBIF_dataset_ids <- gbif_datasets %>%
pull(datasetKey) %>%
unique()
# Get possible column names
GBIF_col_names <- rgbif::datasets(uuid = GBIF_dataset_ids[1]) %>%
.[["data"]] %>%
names(.) %>%
sort()
# get dataset metadata
gbif_datasets <-
lapply(GBIF_dataset_ids, function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(
'key',
'doi',
'title',
'description'
)) %>%
as.data.frame()) %>%
data.table::rbindlist(fill = TRUE)
library(dplyr)
gbif_datasets <- gbif_datasets %>%
rename(id = key,
url = doi,
abstract = description) %>%
mutate(url = paste0("https://doi.org/", url))
View(gbif_datasets)
all_dataset <- rbind(gbif_datasets, obis_datasets)
all_datasets <- rbind(gbif_datasets, obis_datasets)
readr::write_csv(x = all_datasets, file = paste0("GBIF_and_OBIS_datasets_in_California_EEZ_", Sys.Date(), ".csv"))
ls()
rm(list = !ls() %in% c("gbif_datasets", "gbif_col_names"))
rm(list = ls()[!ls() %in% c("gbif_datasets", "gbif_col_names")])
source("query_and_wrangle_gbif.R")
source("query_and_wrangle_gbif.R")
library(rgbif)
library(mregions2)
library(dplyr)
library(sf)
# Query download and mint DOI ---------------------------------------------
# Do this once
# rgbif::occ_download(
#   user = 'sformel',
#   email = 'sformel@usgs.gov',
#   pwd = rstudioapi::askForPassword("Please enter your GBIF password"),
#   pred_and(
#     pred_in(
#       "taxonKey", c(4267628, 5422328)),
#     pred_within(US_north_pacific_EEZ_concave_hull)),
#   format = 'SIMPLE_CSV')
#Check gbif download status
downloadLink <- occ_download_wait('0021163-231120084113126') %>%
.[["downloadLink"]]
#Read in data - must download first
temp <- tempdir()
destfile <- paste0(temp, "/", basename(downloadLink))
download.file(url = downloadLink, destfile = destfile)
csv_name <- basename(tools::file_path_sans_ext(destfile))
gbif_datasets <- readr::read_tsv(file = unz(destfile, filename = paste0(csv_name, ".csv")))
unlink(temp)
# Get list of datasets
gbif_dataset_ids <- gbif_datasets %>%
pull(datasetKey) %>%
unique()
# Get possible column names
gbif_col_names <- rgbif::datasets(uuid = gbif_dataset_ids[1]) %>%
.[["data"]] %>%
names(.) %>%
sort()
# get dataset metadata
gbif_datasets <-
lapply(gbif_dataset_ids, function(x)
rgbif::datasets(uuid = x) %>%
.[["data"]] %>%
purrr::keep(names(.) %in% c(
'key',
'doi',
'title',
'description'
)) %>%
as.data.frame()) %>%
data.table::rbindlist(fill = TRUE)
library(dplyr)
source("query_and_wrangle_gbif.R")
source("query_and_wrangle_obis.R")
source("query_and_wrangle_gbif.R")
source("query_and_wrangle_obis.R")
rm(list = ls()[!ls() %in% c("obis_datasets",
"obis_col_names",
"gbif_datasets",
"gbif_col_names")])
source("query_and_wrangle_gbif.R")
source("query_and_wrangle_obis.R")
rm(list = ls()[!ls() %in% c("obis_datasets",
"obis_col_names",
"gbif_datasets",
"gbif_col_names")])
source("query_and_wrangle_gbif.R")
source("query_and_wrangle_obis.R")
rm(list = ls()[!ls() %in% c("obis_datasets",
"obis_col_names",
"gbif_datasets",
"gbif_col_names")])
obis_col_names <- robis::dataset() %>%
names(.) %>%
sort()
obis_col_names <- robis::dataset(scientificname = c("Macrocystis pyrifera")) %>%
names(.) %>%
sort()
length(obis_col_names)
length(obis_col_names) <- length(gbif_col_names)
colnames_df <- data.frame(gbif_col_names = gbif_col_names,
obis_col_names = obis_col_names)
#Write out col names
readr::write_csv(x = colnames_df,
file = paste0("GBIF_and_OBIS_colnames_",
Sys.Date(),
".csv"))
colnames_df <- tibble('GBIF Column Names' = gbif_col_names,
'OBIS Column Names' = obis_col_names)
#Write out col names
readr::write_csv(x = colnames_df,
file = paste0("GBIF_and_OBIS_colnames_",
Sys.Date(),
".csv"))
#Write out col names
readr::write_csv(x = colnames_df,
file = paste0("GBIF_and_OBIS_colnames_",
Sys.Date(),
".csv"))
source("C:/Users/sformel/Unsynced_Workspace/california_kelp_GBIF_OBIS/combine_and_clean_obis_and_gbif.R")
library(dplyr)
# query obis and gbif
# There is some data wrangling happening in these scripts, but I segregated it so it wouldn't be overwhelming.
source("scripts/query_and_wrangle_gbif.R")
source("scripts/query_and_wrangle_obis.R")
rm(list = ls()[!ls() %in% c("obis_datasets",
"obis_col_names",
"gbif_datasets",
"gbif_col_names")])
#Combine GBIF and OBIS
all_datasets <- rbind(gbif_datasets, obis_datasets)
# Write out table of datasets with basic metadata
readr::write_csv(x = all_datasets,
file = paste0("data_output/GBIF_and_OBIS_datasets_in_California_EEZ_",
Sys.Date(),
".csv"))
# Write out list of other metadata attributes returned by OBIS and GBIF
# Make OBIS same length as GBIF
length(obis_col_names) <- length(gbif_col_names)
colnames_df <- tibble('GBIF Column Names' = gbif_col_names,
'OBIS Column Names' = obis_col_names)
#Write out col names
readr::write_csv(x = colnames_df,
file = paste0("data_output/GBIF_and_OBIS_colnames_",
Sys.Date(),
".csv"))
